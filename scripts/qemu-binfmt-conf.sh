#!/bin/sh
# Enable automatic i386/ARM/aarch64/M68K/MIPS/SPARC/PPC/s390
# program execution by the kernel using the binfmt_misc feature
#

# Base path for finding QEMU binary
BINFMT_DEVEL_MODE=""
BINFMT_VERBOSE=""
BINFMT_BASE_PATH=/usr/local/bin

# Print out some simple usage instructions
usage() {
    echo "Usage: `basename $0` options (-hdp)"
    echo "
This script is used to configure binfmt_misc on a system
to automatically call QEMU when a binary that it can
deal with is detected by the kernel.

Parameters:
    -p PATH     - base path to find QEMU binaries
                  (default: $BINFMT_BASE_PATH)
    -d          - developer mode, search source tree for
                  the QEMU binaries.
    -v          - more verbose output
"
    exit 1
}

# Register an individual binfmt
#
# Before registering the format we check for the
# existence of the binary and if VERBOSE is set we
# specify what exactly has been registered.

register_binfmt () {
    name=$1
    qbin=$2
    binfmt_string=$3
    warning=$4

    if [ -n "${BINFMT_DEVEL_MODE}" ]; then
        qemu_check_path=${BINFMT_BASE_PATH}/${qbin}-linux-user/qemu-${qbin}
    else
        qemu_check_path=${BINFMT_BASE_PATH}/qemu-${qbin}
    fi

    if [ -x "$qemu_check_path" ]; then
        bfmt=":$name:M::$binfmt_string:$qemu_check_path:"
        echo $bfmt > /proc/sys/fs/binfmt_misc/register
        res=$?
        if [ "$res" != "0" ]; then
            echo "Error ($res): $bfmt > /proc/sys/fs/binfmt_misc/register"
        else
            if [ -n "${BINFMT_VERBOSE}" ] ; then
                echo "registered $qemu_check_path for $name binaries"
            fi
            if [ -n "$warning" ]; then
                echo "$warning"
            fi
        fi
    fi
}

while getopts "vhdp:" opt
do
    case $opt in
        h)
            usage
            ;;
        p)
            BINFMT_BASE_PATH=$OPTARG
            ;;
        d)
            BINFMT_DEVEL_MODE=1
            script_dir=`dirname $0`
            BINFMT_BASE_PATH=`realpath $script_dir/..`
            ;;
        v)
            BINFMT_VERBOSE=1
            ;;
        *)
            echo "Unknown option."
            usage
            ;;
  esac
done

# load the binfmt_misc module
if [ ! -d /proc/sys/fs/binfmt_misc ]; then
  /sbin/modprobe binfmt_misc
fi
if [ ! -f /proc/sys/fs/binfmt_misc/register ]; then
  mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
fi

# probe cpu type
cpu=`uname -m`
case "$cpu" in
  i386|i486|i586|i686|i86pc|BePC|x86_64)
    cpu="i386"
  ;;
  m68k)
    cpu="m68k"
  ;;
  mips*)
    cpu="mips"
  ;;
  "Power Macintosh"|ppc|ppc64)
    cpu="ppc"
  ;;
  armv[4-9]*)
    cpu="arm"
  ;;
esac

# register the interpreter for each cpu except for the native one
if [ $cpu != "i386" ] ; then
    register_binfmt i386 i386 "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x03\x00:\xff\xff\xff\xff\xff\xfe\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
    register_binfmt i486 i386 "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x06\x00:\xff\xff\xff\xff\xff\xfe\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
fi
if [ $cpu != "alpha" ] ; then
    register_binfmt alpha alpha "\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x26\x90:\xff\xff\xff\xff\xff\xfe\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
fi
if [ $cpu != "arm" ] ; then
    register_binfmt arm arm "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
    register_binfmt armeb armeb "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
fi
if [ $cpu != "aarch64" ] ; then
    register_binfmt aarch64 aarch64 "\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
fi
if [ $cpu != "sparc" ] ; then
    register_binfmt sparc sparc "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
fi
if [ $cpu != "ppc" ] ; then
    register_binfmt ppc ppc "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x14:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
fi
if [ $cpu != "m68k" ] ; then
    register_binfmt m68k m68k "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x04:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff" 'Please check cpu value and header information for m68k!'
fi
if [ $cpu != "mips" ] ; then
    # FIXME: We could use the other endianness on a MIPS host.
    register_binfmt mips mips "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
    register_binfmt mipsel mipsel "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
    register_binfmt mipsn32 mipsn32 "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
    register_binfmt mipsn32el mipsn32el "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
    register_binfmt mips64 mips64 "\x7fELF\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
    register_binfmt mips64el mips64el "\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
fi
if [ $cpu != "sh" ] ; then
    register_binfmt sh4 sh4 "\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x2a\x00:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff"
    register_binfmt sh4eb sh4eb "\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x2a:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
fi
if [ $cpu != "s390x" ] ; then
    register_binfmt s390x s390x "\x7fELF\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x16:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff"
fi
